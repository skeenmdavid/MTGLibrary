// <auto-generated />
using System;
using MTGLibraryDA.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGLibraryDA.Migrations
{
    [DbContext(typeof(MTGLibraryContext))]
    [Migration("20221207003057_PricesNowString")]
    partial class PricesNowString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MTGLibraryDA.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Decks", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Image_Uris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("art_crop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("border_crop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("large")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("normal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("png")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("small")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image_Uris", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Legalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("alchemy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("brawl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("commander")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("duel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("explorer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("future")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gladiator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("historic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("historicbrawl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("legacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldschool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pauper")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paupercommander")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("penny")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pioneer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("premodern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("standard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vintage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Legalities", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Libraries", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Prices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("eur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eur_foil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usd_etched")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usd_foil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prices", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Purchase_Uris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("cardhoarder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cardmarket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tcgplayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Purchase_Uris", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Related_Uris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("edhrec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tcgplayer_infinite_articles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tcgplayer_infinite_decks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Related_Uris", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.ScryfallCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountOwned")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("_object")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("booster")
                        .HasColumnType("bit");

                    b.Property<string>("border_color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_back_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("card_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("cmc")
                        .HasColumnType("real");

                    b.Property<string>("collector_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("color_identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("colors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("digital")
                        .HasColumnType("bit");

                    b.Property<int>("edhrec_rank")
                        .HasColumnType("int");

                    b.Property<string>("finishes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("flavor_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("foil")
                        .HasColumnType("bit");

                    b.Property<string>("frame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("full_art")
                        .HasColumnType("bit");

                    b.Property<bool>("highres_image")
                        .HasColumnType("bit");

                    b.Property<string>("illustration_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("image_urisId")
                        .HasColumnType("int");

                    b.Property<string>("keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("layout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("legalitiesId")
                        .HasColumnType("int");

                    b.Property<string>("mana_cost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("nonfoil")
                        .HasColumnType("bit");

                    b.Property<string>("oracle_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oracle_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("oversized")
                        .HasColumnType("bit");

                    b.Property<int>("pricesId")
                        .HasColumnType("int");

                    b.Property<string>("prints_search_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("promo")
                        .HasColumnType("bit");

                    b.Property<int>("purchase_urisId")
                        .HasColumnType("int");

                    b.Property<string>("rarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("related_urisId")
                        .HasColumnType("int");

                    b.Property<string>("released_at")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("reprint")
                        .HasColumnType("bit");

                    b.Property<bool>("reserved")
                        .HasColumnType("bit");

                    b.Property<string>("rulings_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scryfall_set_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scryfall_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("security_stamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set_search_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("set_uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("story_spotlight")
                        .HasColumnType("bit");

                    b.Property<int>("tcgplayer_id")
                        .HasColumnType("int");

                    b.Property<bool>("textless")
                        .HasColumnType("bit");

                    b.Property<string>("type_line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("variation")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("image_urisId");

                    b.HasIndex("legalitiesId");

                    b.HasIndex("pricesId");

                    b.HasIndex("purchase_urisId");

                    b.HasIndex("related_urisId");

                    b.ToTable("ScryfallCards", (string)null);
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.ScryfallCard", b =>
                {
                    b.HasOne("MTGLibraryDA.Entities.Library", null)
                        .WithMany("scryfallCards")
                        .HasForeignKey("LibraryId");

                    b.HasOne("MTGLibraryDA.Entities.Image_Uris", "image_uris")
                        .WithMany()
                        .HasForeignKey("image_urisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGLibraryDA.Entities.Legalities", "legalities")
                        .WithMany()
                        .HasForeignKey("legalitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGLibraryDA.Entities.Prices", "prices")
                        .WithMany()
                        .HasForeignKey("pricesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGLibraryDA.Entities.Purchase_Uris", "purchase_uris")
                        .WithMany()
                        .HasForeignKey("purchase_urisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTGLibraryDA.Entities.Related_Uris", "related_uris")
                        .WithMany()
                        .HasForeignKey("related_urisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("image_uris");

                    b.Navigation("legalities");

                    b.Navigation("prices");

                    b.Navigation("purchase_uris");

                    b.Navigation("related_uris");
                });

            modelBuilder.Entity("MTGLibraryDA.Entities.Library", b =>
                {
                    b.Navigation("scryfallCards");
                });
#pragma warning restore 612, 618
        }
    }
}
