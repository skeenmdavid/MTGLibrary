@model MTGLibrary.ViewModel.LibraryViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div>
    <div class="d-flex justify-content-center">
        <h2>Card Search:</h2>
    </div>
    <div class="d-flex justify-content-center">
        @using (Html.BeginForm("CardSearch", "Home", FormMethod.Get, new { @class = "ui large form" }))
        {
            <div>
                <input id="autoComplete" type="search" name="name" tabindex="1" autocomplete="on">
            </div>
            <div>
                <input type="submit" value="Search" />
            </div>
        }
    </div>
</div>
<div>
    <input id="OpenCamButton" type=button value="Open Camera" onClick="OpenCameraSection()">
    <input id="HideCamButton" type=button value="Hide Camera" onClick="HideCameraSection()">
</div>
<div id="CameraSection">
    <div id="my_camera"></div>
    <form>
        <input type=button value="Take Snapshot" onClick="take_snapshot()">
    </form>
</div>
<div>
    <div class="d-flex justify-content-center">
        <h2>Current Library</h2>
    </div>
    <div>
        <table id="LibraryTable" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th scope="col">
                        Card Name
                    </th>
                    <th scope="col">
                        Count
                    </th>
                    <th scope="col">
                        Location
                    </th>
                    <th scope="col">
                        Remove All?
                    </th>
                </tr>
            </thead>
            @foreach(var uCard in Model.Library.scryfallCards){
                <tr scope="row">
                    <td class="hover_img">
                        <a href="@Url.Action("LibCardEdit", "Home", new {cardId = uCard.card_id})">@uCard.card_name<span><img src="@uCard.image_uris.normal" alt="image" height="400" /></span></a>
                    </td>
                    <td>
                        @uCard.CountOwned
                    </td>
                    <td>
                        @uCard.Location
                    </td>
                    <td>
                        <input id="@uCard.card_id" type="button" name="RemoveCard" onclick="RemoveCardButtonClick(this.id)" class="btn btn-danger" value="Remove from Library" />
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>
<script type="text/javascript" src="~/js/webcam.min.js"></script>

<script>


    $(document).ready(function(){
        $.noConflict();

        $("#CameraSection").hide();
        $("#HideCamButton").hide();

        $("#LibraryTable").DataTable();
    })

    function OpenCameraSection(){

        $("#CameraSection").show();
        $("#HideCamButton").show();
        $("#OpenCamButton").hide();

        Webcam.set({
            width: 1280,
            height: 720,
            image_format: 'jpeg',
            jpeg_quality: 90
        });
        Webcam.attach('#my_camera');

    }

    function HideCameraSection(){
        $("#CameraSection").hide();
        $("#HideCamButton").hide();
        $("#OpenCamButton").show();
        Webcam.reset();
    }

    function take_snapshot() {
        let uploadUrl = '@Url.Action("ProcessImageForResults", "Home")';

        // take snapshot and get image data
        Webcam.snap(function (data_uri) {

            var image_data = data_uri.replace(/^data\:image\/\w+\;base64\,/, '');
            console.log(image_data);
            var payload = { data: image_data }
            $.ajax({
                type: 'POST',
                url: uploadUrl,
                data: payload,
                success: function(result){

                }
            })
        });
    }

    function base64DecToArr(sBase64, nBlocksSize) {
        // convert base64 encoded string to Uintarray
        // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding
        var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
            nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2,
            taBytes = new Uint8Array(nOutLen);

        for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
            nMod4 = nInIdx & 3;
            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
            if (nMod4 === 3 || nInLen - nInIdx === 1) {
                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                    taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                }
                nUint24 = 0;
            }
        }
        return taBytes;
    }

    function b64ToUint6(nChr) {
		// convert base64 encoded character to 6-bit integer
		// from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding
		return nChr > 64 && nChr < 91 ? nChr - 65
			: nChr > 96 && nChr < 123 ? nChr - 71
			: nChr > 47 && nChr < 58 ? nChr + 4
			: nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
	}

    const scryFallACUri = "https://api.scryfall.com/cards/autocomplete?q="
    const autoCompleteJS = new autoComplete({
        data: {
            src: async () => {
                try {
                    // Loading placeholder text
                    document
                        .getElementById("autoComplete")
                        .setAttribute("placeholder", "Loading...");
                    // Fetch External Data Source

                    // Fetch External Data Source
                    let stringFromAuto = document.getElementById("autoComplete").value;

                    console.log(stringFromAuto);

                    let searchString = stringFromAuto.trim().replace(' ', '+');

                    let searchSource = scryFallACUri + searchString;

                    const source = await fetch(
                        searchSource
                    );

                    const cardNames = await source.json();

                    // Post Loading placeholder text
                    document
                        .getElementById("autoComplete")
                        .setAttribute("placeholder", autoCompleteJS.placeHolder);
                    // Returns Fetched data

                    console.log(cardNames.data);

                    return cardNames.data;
                } catch (error) {
                    return error;
                }
            }
        },
        placeHolder: "Search for new Cards for your library!",
        resultsList: {
            element: (list, data) => {
                const info = document.createElement("p");
                if (data.results.length > 0) {
                    info.innerHTML = `Displaying <strong>${data.results.length}</strong> out of <strong>${data.matches.length}</strong> results`;
                } else {
                    info.innerHTML = `Found <strong>${data.matches.length}</strong> matching results for <strong>"${data.query}"</strong>`;
                }
                list.prepend(info);
            },
            noResults: true,
            maxResults: 15,
            tabSelect: true
        },
        events: {
            input: {
                focus: () => {
                    if (autoCompleteJS.input.value.length) autoCompleteJS.start();
                }
            }
        }
    });

    autoCompleteJS.input.addEventListener("selection", function (event) {
        const feedback = event.detail;
        autoCompleteJS.input.blur();
        // Prepare User's Selected Value
        const selection = feedback.selection.value;
        // Replace Input value with the selected value
        autoCompleteJS.input.value = selection;
        // Console log autoComplete data feedback
        console.log(feedback);
    });


    function RemoveCardButtonClick(cardId){
        var url = '@Url.Action("RemoveCardFromLibrary", "Home")' + '/' + cardId;

        $.ajax({
            type: "POST",
            url: url,
            contentType: false,
            success: function(response){
                if (response.cardRemoved == true) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Card has been successfully removed from your collection!',
                        icon: 'success',
                        confirmButtonText: 'Cool'
                    });
                }
                else {
                    Swal.fire({
                        title: 'Failed!',
                        text: 'Something broke when trying to remove stuff from the DB!',
                        icon: 'warning',
                        confirmButtonText: 'Shit'
                    })
                }
            },
            error: function (response) {
                Swal.fire({
                    title: 'Error!',
                    text: 'There was an error in sending the message',
                    icon: 'error',
                    confirmButtonText: 'Fuck'
                })
            }
        });
        
        
    }
</script>